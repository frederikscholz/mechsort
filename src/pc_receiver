#include "ros/ros.h"
#include "std_msgs/String.h"
#include "sensor_msgs/PointCloud2.h"
#include "sensor_msgs/Image.h"
#include "tf2_msgs/TFMessage.h"
#include <pcl_conversions/pcl_conversions.h>
#include <pcl/point_cloud.h>
#include <pcl/point_types.h>

void cloud_cb (const sensor_msgs::PointCloud2ConstPtr& msg)
{
    pcl::PointCloud<pcl::PointXYZ> cloud;
    pcl::fromROSMsg(*msg, cloud);

    float highest_point = std::numeric_limits<float>::lowest();
    for (const auto& point : cloud)
    {
        if (point.z > highest_point)
        {
            highest_point = point.z;
        }
    }
    ROS_INFO("Highest point: %f", highest_point);
}

int main (int argc, char **argv)
{
    ros::init(argc, argv, "pc_highestPoint");
    ros::NodeHandle nh;

    ros::Publisher pub = nh.advertise<sensor_msgs::PointCloud2>("highestPoint", 1);

    ros::Subscriber sub = nh.subscribe<sensor_msgs::PointCloud2>("/zed2i/zed_node/point_cloud/cloud_registered", 1,
    [&](const sensor_msgs::PointCloud2ConstPtr& msg)
    {
        pcl::PointCloud<pcl::PointXYZRGB> cloud;
        pcl::fromROSMsg(*msg, cloud);
        float highestPoint = std::numeric_limits<float>::lowest();
        for (const auto& point : cloud)
        {
            if (point.z > highestPoint)
            {
                highestPoint = point.z;
            }
        }
        ROS_INFO("Highest Point: %f", highestPoint);

        sensor_msgs::PointCloud2 highestPoint_msg;

        pcl::PointCloud<pcl::PointXYZ> highestPoint_cloud;
        pcl::PointXYZ highestPoint_pcl;
        highestPoint_pcl.x= 0;
        highestPoint_pcl.y = 0;
        highestPoint_pcl.z = highestPoint;
        highestPoint_cloud.points.push_back(highestPoint_pcl);
        pcl::toROSMsg(highestPoint_pcl, highestPoint_msg);
        highestPoint_msg.header = msg->header;
        pub.publish(highestPoint_msg);
    });

    ros::spin ();
    return 0;
}